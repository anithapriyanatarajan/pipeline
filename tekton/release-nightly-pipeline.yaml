---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline-release-nightly
spec:
  params:
    - name: package
      description: package to release
      default: github.com/tektoncd/pipeline
    - name: gitRevision
      description: the git revision to release
    - name: gitOrg
      description: GitHub organization (extracted from package)
      default: tektoncd
    - name: gitRepo
      description: GitHub repository name
      default: pipeline
    - name: imageRegistry
      description: The target image registry
      default: ghcr.io
    - name: imageRegistryPath
      description: The path (project) in the image registry
      default: tekton-releases-nightly
    - name: imageRegistryUser
      description: The user for the image registry credentials
      default: _json_key
    - name: imageRegistryRegions
      description: The target image registry regions (not used for GHCR, kept for compatibility)
      default: ""
    - name: versionTag
      description: nightly tag (e.g. vYYYYMMDD-abc1234)
    - name: releaseBucket
      description: bucket where the release is stored. The bucket must be project specific.
      default: gs://tekton-releases-nightly/pipeline
    - name: buildPlatforms
      description: Platforms to build images for (e.g. linux/amd64,linux/arm64)
      default: linux/amd64,linux/arm64,linux/s390x,linux/ppc64le
    - name: publishPlatforms
      description: Platforms to publish images for (e.g. linux/amd64,linux/arm64,windows/amd64)
      default: linux/amd64,linux/arm64,linux/s390x,linux/ppc64le,windows/amd64
    - name: koExtraArgs
      description: Extra args to be passed to ko
      default: "--preserve-import-paths"
    - name: serviceAccountPath
      description: The path to the service account file within the release-secret workspace
    - name: serviceAccountImagesPath
      description: The path to the service account file or credentials within the release-images-secret workspace
    - name: runTests
      description: If set to something other than "true", skip the build and test tasks
      default: "true"
    - name: retentionDays
      description: Number of days to retain nightly releases (older releases will be deleted)
      default: "30"
  workspaces:
    - name: workarea
      description: The workspace where the repo will be cloned.
    - name: release-secret
      description: The secret that contains a service account authorized to push to the output bucket
    - name: release-images-secret
      description: The secret that contains a service account authorized to push to the imageRegistry
  results:
    - name: commit-sha
      value: $(tasks.git-clone.results.commit)
    - name: release-file
      value: $(tasks.report-bucket.results.release)
    - name: release-file-no-tag
      value: $(tasks.report-bucket.results.release-no-tag)

  tasks:
    - name: git-clone
      taskRef:
        resolver: hub
        params:
          - name: name
            value: git-clone
          - name: version
            value: "0.10"
      workspaces:
        - name: output
          workspace: workarea
          subPath: git
      params:
        - name: url
          value: https://$(params.package)
        - name: revision
          value: $(params.gitRevision)

    - name: unit-tests
      runAfter: [git-clone]
      when:
        - input: "$(params.runTests)"
          operator: in
          values: ["true"]
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: ghcr.io/tektoncd/catalog/upstream/tasks/golang-test:0.2
          - name: name
            value: golang-test
          - name: kind
            value: task
      params:
        - name: package
          value: $(params.package)
        - name: flags
          value: -v -mod=vendor
      workspaces:
        - name: source
          workspace: workarea
          subPath: git

    - name: build
      runAfter: [git-clone]
      when:
        - input: "$(params.runTests)"
          operator: in
          values: ["true"]
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: ghcr.io/tektoncd/catalog/upstream/tasks/golang-build:0.3
          - name: name
            value: golang-build
          - name: kind
            value: task
      params:
        - name: package
          value: $(params.package)
        - name: packages
          value: ./cmd/...
      workspaces:
        - name: source
          workspace: workarea
          subPath: git

    - name: publish-images
      runAfter: [unit-tests, build]
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/$(params.gitOrg)/$(params.gitRepo).git
          - name: revision
            value: $(params.gitRevision)
          - name: pathInRepo
            value: tekton/publish.yaml
      params:
        - name: package
          value: $(params.package)
        - name: versionTag
          value: $(params.versionTag)
        - name: imageRegistry
          value: $(params.imageRegistry)
        - name: imageRegistryPath
          value: $(params.imageRegistryPath)
        - name: imageRegistryUser
          value: $(params.imageRegistryUser)
        - name: imageRegistryRegions
          value: $(params.imageRegistryRegions)
        - name: releaseAsLatest
          value: "false"
        - name: serviceAccountPath
          value: $(params.serviceAccountImagesPath)
        - name: platforms
          value: $(params.publishPlatforms)
        - name: koExtraArgs
          value: $(params.koExtraArgs)
      workspaces:
        - name: source
          workspace: workarea
          subPath: git
        - name: output
          workspace: workarea
          subPath: bucket
        - name: release-secret
          workspace: release-images-secret
      timeout: 3h

    - name: publish-to-bucket
      runAfter: [publish-images]
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: ghcr.io/tektoncd/catalog/upstream/tasks/gcs-upload:0.3
          - name: name
            value: gcs-upload
          - name: kind
            value: task
      workspaces:
        - name: credentials
          workspace: release-secret
        - name: source
          workspace: workarea
          subPath: bucket
      params:
        - name: location
          value: $(params.releaseBucket)/nightly/$(params.versionTag)
        - name: path
          value: $(params.versionTag)
        - name: serviceAccountPath
          value: $(params.serviceAccountPath)

    - name: publish-latest-nightly
      runAfter: [publish-to-bucket]
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: ghcr.io/tektoncd/catalog/upstream/tasks/gcs-upload:0.3
          - name: name
            value: gcs-upload
          - name: kind
            value: task
      workspaces:
        - name: credentials
          workspace: release-secret
        - name: source
          workspace: workarea
          subPath: bucket
      params:
        - name: location
          value: $(params.releaseBucket)/nightly/latest
        - name: path
          value: $(params.versionTag)
        - name: serviceAccountPath
          value: $(params.serviceAccountPath)

    - name: cleanup-old-nightlies
      runAfter: [publish-latest-nightly]
      taskSpec:
        params:
          - name: releaseBucket
          - name: retentionDays
          - name: serviceAccountPath
        workspaces:
          - name: credentials
        steps:
          - name: cleanup
            image: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
            env:
              - name: RELEASE_BUCKET
                value: $(params.releaseBucket)
              - name: RETENTION_DAYS
                value: $(params.retentionDays)
              - name: SERVICE_ACCOUNT_PATH
                value: $(params.serviceAccountPath)
            script: |
              #!/bin/bash
              set -euo pipefail  # Enhanced error handling and unset variable protection
              
              # Input validation
              if [[ ! "${RETENTION_DAYS}" =~ ^[0-9]+$ ]] || [[ "${RETENTION_DAYS}" -lt 1 ]] || [[ "${RETENTION_DAYS}" -gt 365 ]]; then
                echo "ERROR: RETENTION_DAYS must be a number between 1 and 365, got: ${RETENTION_DAYS}"
                exit 1
              fi
              
              if [[ ! "${RELEASE_BUCKET}" =~ ^gs://[a-zA-Z0-9][a-zA-Z0-9_.-]*[a-zA-Z0-9]/?.*$ ]]; then
                echo "ERROR: Invalid RELEASE_BUCKET format, must start with gs://, got: ${RELEASE_BUCKET}"
                exit 1
              fi
              
              # Authenticate with service account (with validation)
              if [[ ! -f "$(workspaces.credentials.path)/${SERVICE_ACCOUNT_PATH}" ]]; then
                echo "ERROR: Service account file not found at: $(workspaces.credentials.path)/${SERVICE_ACCOUNT_PATH}"
                exit 1
              fi
              
              gcloud auth activate-service-account --key-file="$(workspaces.credentials.path)/${SERVICE_ACCOUNT_PATH}"
              
              # Calculate the cutoff date (RETENTION_DAYS ago)
              CUTOFF_DATE=$(date -d "${RETENTION_DAYS} days ago" +%Y%m%d)
              echo "Cleaning up nightly releases older than ${RETENTION_DAYS} days (before ${CUTOFF_DATE})"
              
              # Sanitize bucket path (remove gs:// prefix safely)
              BUCKET_PATH="${RELEASE_BUCKET#gs://}"
              if [[ "${BUCKET_PATH}" == "${RELEASE_BUCKET}" ]]; then
                echo "ERROR: RELEASE_BUCKET must start with gs://"
                exit 1
              fi
              
              # Validate bucket access before cleanup
              if ! gsutil ls "gs://${BUCKET_PATH}/nightly/" >/dev/null 2>&1; then
                echo "ERROR: Cannot access bucket path gs://${BUCKET_PATH}/nightly/ or path doesn't exist"
                exit 1
              fi
              
              # Get list of nightly directories with safe parsing
              echo "Scanning for directories older than ${CUTOFF_DATE}..."
              TEMP_FILE=$(mktemp)
              trap 'rm -f "${TEMP_FILE}"' EXIT
              
              # List directories and filter safely
              gsutil ls "gs://${BUCKET_PATH}/nightly/" | while IFS= read -r dir; do
                # Extract directory name safely
                DIR_NAME=$(basename "${dir}")
                # Validate format: v20250710-abc1234
                if [[ "${DIR_NAME}" =~ ^v([0-9]{8})-[a-f0-9]+/?$ ]]; then
                  DIR_DATE="${BASH_REMATCH[1]}"
                  # Compare dates (string comparison works for YYYYMMDD format)
                  if [[ "${DIR_DATE}" < "${CUTOFF_DATE}" ]]; then
                    echo "${dir}" >> "${TEMP_FILE}"
                  fi
                fi
              done
              
              # Delete old directories if any found
              if [[ -s "${TEMP_FILE}" ]]; then
                echo "Found directories to delete:"
                cat "${TEMP_FILE}"
                echo "Proceeding with deletion..."
                
                # Delete directories one by one for better error handling
                while IFS= read -r dir; do
                  echo "Deleting: ${dir}"
                  if gsutil -m rm -r "${dir}"; then
                    echo "Successfully deleted: ${dir}"
                  else
                    echo "WARNING: Failed to delete: ${dir}"
                  fi
                done < "${TEMP_FILE}"
                echo "Cleanup completed"
              else
                echo "No old nightly releases found to delete"
              fi
      workspaces:
        - name: credentials
          workspace: release-secret
      params:
        - name: releaseBucket
          value: $(params.releaseBucket)
        - name: retentionDays
          value: $(params.retentionDays)
        - name: serviceAccountPath
          value: $(params.serviceAccountPath)

    - name: report-bucket
      runAfter: [cleanup-old-nightlies]
      params:
        - name: releaseBucket
          value: $(params.releaseBucket)
        - name: versionTag
          value: $(params.versionTag)
      taskSpec:
        params:
          - name: releaseBucket
          - name: versionTag
        results:
          - name: release
            description: URL of release.yaml
          - name: release-no-tag
            description: URL of release.notag.yaml
        steps:
          - name: create-results
            image: docker.io/library/alpine
            env:
              - name: RELEASE_BUCKET
                value: $(params.releaseBucket)
              - name: VERSION_TAG
                value: $(params.versionTag)
            script: |
              BASE_URL=$(echo "${RELEASE_BUCKET}/nightly/${VERSION_TAG}")
              BASE_URL=$(echo ${BASE_URL} | sed 's,gs://,https://storage.googleapis.com/,g')
              echo "${BASE_URL}/release.yaml" > $(results.release.path)
              echo "${BASE_URL}/release.notag.yaml" > $(results.release-no-tag.path)