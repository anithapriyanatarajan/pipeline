name: Tekton Nightly Build

on:
  schedule:
    # Run at 03:00 UTC daily
    - cron: "0 3 * * *"
  workflow_dispatch:
    inputs:
      kubernetes_version:
        description: 'Kubernetes version to test with'
        required: false
        default: 'v1.33.0'
        type: choice
        options:
          - v1.33.0
          - v1.32.0
          - v1.31.0
      dry_run:
        description: 'Perform dry run (no actual publishing)'
        required: false
        default: false
        type: boolean
      nightly_bucket:
        description: 'Nightly bucket for builds'
        required: false
        default: 'gs://tekton-releases-nightly/pipeline'
        type: string
  # uncomment the following to enable manual testing of the workflow
  push:
    branches:
      - test-rel
    paths:
      - '.github/workflows/nightly-release.yaml'
      - 'tekton/**'
      - 'cmd/**'
      - 'pkg/**'

env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}
  COMPONENT: pipeline
  KUBERNETES_VERSION: ${{ inputs.kubernetes_version || 'v1.33.0' }}
  DRY_RUN: ${{ inputs.dry_run || false }}
  NIGHTLY_BUCKET: ${{ inputs.nightly_bucket || 'gs://anitha-tekton-nightly-test/pipeline' }}

jobs:
  build:
    name: Nightly Build (K8s ${{ inputs.kubernetes_version || 'v1.33.0' }})
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version info
        id: version
        run: |
          latest_sha=${{ github.sha }}
          date_tag=$(date +v%Y%m%d-${latest_sha:0:7})
          echo "version_tag=${date_tag}" >> "$GITHUB_OUTPUT"
          echo "latest_sha=${latest_sha}" >> "$GITHUB_OUTPUT"

      - name: Set up Kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          node_image: kindest/node:${{ env.KUBERNETES_VERSION }}
          cluster_name: tekton-nightly

      - name: Set up Tekton
        uses: tektoncd/actions/setup-tektoncd@main
        with:
          pipeline_version: latest
          setup_registry: "true"
          patch_etc_hosts: "true"

      - name: Configure Tekton Git Resolver
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN || github.token }}
        run: |
          kubectl create secret generic git-resolver-secret \
            --from-literal=token="${GITHUB_TOKEN}" \
            -n tekton-pipelines-resolvers || true

          kubectl patch configmap resolvers-feature-flags -n tekton-pipelines-resolvers --patch='
          data:
            enable-git-resolver: "true"
            enable-hub-resolver: "true"
            enable-bundles-resolver: "true"
            enable-cluster-resolver: "true"
          ' || true

          kubectl patch configmap git-resolver-config -n tekton-pipelines-resolvers --patch='
          data:
            default-url: "https://github.com"
            default-revision: "main"
            fetch-timeout: "1m"
            scm-type: "github"
            server-url: "https://api.github.com"
            api-token-secret-name: "git-resolver-secret"
            api-token-secret-key: "token"
          ' || true

      - name: Install tkn CLI
        uses: tektoncd/actions/setup-tektoncd-cli@main
        with:
          version: latest

      - name: Apply Build Pipeline Definition
        run: |
          kubectl apply -f tekton/publish-nightly.yaml
          kubectl apply -f tekton/release-nightly-${{ env.COMPONENT }}.yaml

      - name: Create secrets and PVC template
        env:
          GCS_SERVICE_ACCOUNT_KEY: ${{ secrets.GCS_SERVICE_ACCOUNT_KEY }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN || github.token }}
        run: |
          echo "${GCS_SERVICE_ACCOUNT_KEY}" > /tmp/gcs-key.json
          kubectl create secret generic release-secret \
            --from-file=release.json=/tmp/gcs-key.json
          rm -f /tmp/gcs-key.json

          kubectl create secret docker-registry ghcr-creds \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password="${GHCR_TOKEN}" \
            --docker-email=${{ github.actor }}@users.noreply.github.com

          cat > workspace-template.yaml << EOF
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
          EOF

      - name: Start Tekton Build Pipeline
        run: |
          PACKAGE="github.com/tektoncd/${{ env.COMPONENT }}"
          BUCKET="${{ env.NIGHTLY_BUCKET }}"
          GIT_ORG=$(echo "${PACKAGE}" | cut -d'/' -f2)
          GIT_REPO=$(echo "${PACKAGE}" | cut -d'/' -f3)

          tkn pipeline start pipeline-release-nightly \
            --param package="${PACKAGE}" \
            --param gitRevision="${{ steps.version.outputs.latest_sha }}" \
            --param gitOrg="${GIT_ORG}" \
            --param gitRepo="${GIT_REPO}" \
            --param versionTag="${{ steps.version.outputs.version_tag }}" \
            --param releaseBucket="${BUCKET}" \
            --param imageRegistry=ghcr.io \
            --param imageRegistryPath="tekton-releases-nightly" \
            --param imageRegistryUser="tekton-robot" \
            --param imageRegistryRegions="" \
            --param buildPlatforms="linux/amd64,linux/arm64,linux/s390x,linux/ppc64le" \
            --param publishPlatforms="linux/amd64,linux/arm64,linux/s390x,linux/ppc64le,windows/amd64" \
            --param koExtraArgs="--preserve-import-paths" \
            --param serviceAccountPath=release.json \
            --param serviceAccountImagesPath=.dockerconfigjson \
            --param runTests="true" \
            --param retentionDays="30" \
            --workspace name=workarea,volumeClaimTemplateFile=workspace-template.yaml \
            --workspace name=release-secret,secret=release-secret \
            --workspace name=release-images-secret,secret=ghcr-creds \
            --pipeline-timeout 2h \
            --showlog