name: Nightly Tekton Release

on:
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:
  push:
    branches:
      - nightly-pipeline-gha

jobs:
  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        kubernetes_version: [v1.31.0]
    name: Nightly Pipeline Release (K8s ${{ matrix.kubernetes_version }})

    env:
      KUBERNETES_VERSION: ${{ matrix.kubernetes_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest commit from main
        id: latest
        run: |
          set -euo pipefail
          if [[ "${{ github.repository }}" == "tektoncd/pipeline" ]]; then
            REPO="https://github.com/tektoncd/pipeline.git"
            echo "🚀 PRODUCTION MODE: Using upstream tektoncd/pipeline repository"
          else
            REPO="https://github.com/${{ github.repository }}.git"
            echo "🧪 FORK TESTING MODE: Using fork repository ${{ github.repository }}"
          fi
          sha=$(git ls-remote ${REPO} refs/heads/main | cut -f1)
          echo "sha=${sha}" >> "$GITHUB_OUTPUT"
          date_tag=$(date +v%Y%m%d-${sha:0:7})
          echo "versionTag=${date_tag}" >> "$GITHUB_OUTPUT"
          echo "Using SHA: ${sha}"
          echo "Version tag: ${date_tag}"

      - name: Set up Kind
        uses: helm/kind-action@v1.8.0
        with:
          node_image: kindest/node:${{ env.KUBERNETES_VERSION }}

      - name: Display Kubernetes Version
        run: |
          set -euo pipefail
          echo "🐳 Kubernetes cluster version: ${{ env.KUBERNETES_VERSION }}"
          kubectl version --client
          kubectl version --short

      - name: Install Tekton Pipelines
        run: |
          set -euo pipefail
          kubectl apply -f https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
          kubectl wait deployment tekton-pipelines-controller -n tekton-pipelines --for=condition=Available=True --timeout=180s
          kubectl wait deployment tekton-pipelines-webhook -n tekton-pipelines --for=condition=Available=True --timeout=180s
          kubectl wait --for=condition=ready pod -l app=tekton-pipelines-webhook -n tekton-pipelines --timeout=120s
          echo "✅ Tekton Pipelines installation completed"

      - name: Debug Tekton Installation
        run: |
          set -euo pipefail
          kubectl get deployments -n tekton-pipelines -o wide
          kubectl get pods -n tekton-pipelines -o wide
          kubectl get services -n tekton-pipelines
          kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io | grep tekton || echo "No Tekton webhooks found"
          kubectl get events -n tekton-pipelines --sort-by='.lastTimestamp' | tail -10 || echo "No events found"

      - name: Install tkn CLI
        run: |
          set -euo pipefail
          curl -sL https://github.com/tektoncd/cli/releases/download/v0.41.1/tkn_0.41.1_Linux_x86_64.tar.gz | tar xz
          sudo mv tkn /usr/local/bin/

      - name: Apply Nightly Pipeline Definition
        run: |
          set -euo pipefail
          for i in {1..10}; do
            if kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io webhook.pipeline.tekton.dev >/dev/null 2>&1; then
              echo "✅ Tekton webhook configuration found"
              break
            fi
            echo "⏳ Waiting for webhook configuration... (attempt $i/10)"
            sleep 5
          done
          for i in {1..5}; do
            if kubectl apply -f tekton/release-nightly-pipeline.yaml; then
              echo "✅ Pipeline applied successfully"
              break
            else
              echo "⚠️  Failed to apply pipeline (attempt $i/5)"
              if [ $i -eq 5 ]; then
                echo "❌ Failed to apply pipeline after 5 attempts"
                exit 1
              fi
              echo "⏳ Waiting 10 seconds before retry..."
              sleep 10
            fi
          done
          kubectl get pipeline pipeline-release-nightly -o name
          echo "✅ Pipeline verification completed"

      - name: Create secrets and PVC template
        env:
          GCS_SERVICE_ACCOUNT_KEY: ${{ secrets.GCS_SERVICE_ACCOUNT_KEY }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          set -euo pipefail
          if [[ -z "${GCS_SERVICE_ACCOUNT_KEY}" ]]; then
            echo "❌ ERROR: GCS_SERVICE_ACCOUNT_KEY secret is not configured"
            exit 1
          fi
          if [[ -z "${GHCR_TOKEN}" ]]; then
            echo "❌ ERROR: GHCR_TOKEN secret is not configured"
            exit 1
          fi
          # Use plain echo, not base64 decoding
          echo "${GCS_SERVICE_ACCOUNT_KEY}" > /tmp/gcs-key.json
          kubectl create secret generic release-secret \
            --from-file=release.json=/tmp/gcs-key.json
          rm -f /tmp/gcs-key.json
          kubectl create secret docker-registry ghcr-creds \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password="${GHCR_TOKEN}" \
            --docker-email=${{ github.actor }}@users.noreply.github.com
          cat <<EOF > workspace-template.yaml
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
          EOF

      - name: Start Nightly Tekton Pipeline
        run: |
          set -euo pipefail
          validate_param() {
            local param_name="$1"
            local param_value="$2"
            local pattern="$3"
            if [[ ! "${param_value}" =~ ${pattern} ]]; then
              echo "❌ ERROR: Invalid ${param_name}: ${param_value}"
              echo "Expected pattern: ${pattern}"
              exit 1
            fi
          }
          validate_param "gitRevision" "${{ steps.latest.outputs.sha }}" "^[a-f0-9]{40}$"
          validate_param "versionTag" "${{ steps.latest.outputs.versionTag }}" "^v[0-9]{8}-[a-f0-9]{7}$"
          if [[ "${{ github.repository }}" == "tektoncd/pipeline" ]]; then
            PACKAGE="github.com/tektoncd/pipeline"
            BUCKET="gs://tekton-releases-nightly/pipeline"
            REGISTRY_PATH="tekton-releases-nightly"
            REGISTRY_USER="tekton-robot"
            RUN_TESTS="true"
            RETENTION="30"
          else
            PACKAGE="github.com/${{ github.repository }}"
            BUCKET="gs://anitha-tekton-nightly-test/pipeline"
            REGISTRY_PATH="${{ github.repository_owner }}/pipeline-test"
            REGISTRY_USER="${{ github.actor }}"
            RUN_TESTS="false"
            RETENTION="7"
          fi
          validate_param "package" "${PACKAGE}" "^github\.com/[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+$"
          validate_param "bucket" "${BUCKET}" "^gs://[a-zA-Z0-9][a-zA-Z0-9_.-]*[a-zA-Z0-9](/.*)?$"
          validate_param "registryPath" "${REGISTRY_PATH}" "^[a-zA-Z0-9][a-zA-Z0-9_.-]*[a-zA-Z0-9](/[a-zA-Z0-9_.-]+)*$"
          validate_param "retention" "${RETENTION}" "^[1-9][0-9]*$"
          echo "🚀 Starting Tekton pipeline..."
          tkn pipeline list
          PIPELINE_START_OUTPUT=$(tkn pipeline start pipeline-release-nightly \
            --param package="${PACKAGE}" \
            --param gitRevision="${{ steps.latest.outputs.sha }}" \
            --param versionTag="${{ steps.latest.outputs.versionTag }}" \
            --param releaseBucket="${BUCKET}" \
            --param imageRegistry=ghcr.io \
            --param imageRegistryPath="${REGISTRY_PATH}" \
            --param imageRegistryUser="${REGISTRY_USER}" \
            --param serviceAccountPath=release.json \
            --param serviceAccountImagesPath=credentials \
            --param runTests="${RUN_TESTS}" \
            --param retentionDays="${RETENTION}" \
            --workspace name=workarea,volumeClaimTemplateFile=workspace-template.yaml \
            --workspace name=release-secret,secret=release-secret \
            --workspace name=release-images-secret,secret=ghcr-creds \
            --pipeline-timeout 2h 2>&1)

          echo "PIPELINE_START_OUTPUT:"
          echo "$PIPELINE_START_OUTPUT"

          PIPELINE_RUN=$(echo "${PIPELINE_START_OUTPUT}" | grep "PipelineRun started:" | awk '{print $3}' | head -n1)
          if [ -z "${PIPELINE_RUN}" ]; then
            echo "❌ Failed to extract pipeline run name from output"
            echo "Full output was: ${PIPELINE_START_OUTPUT}"
            exit 1
          fi
          echo "✅ Pipeline run started: ${PIPELINE_RUN}"
          echo "PIPELINE_RUN=${PIPELINE_RUN}" >> $GITHUB_ENV

      - name: Monitor Pipeline Execution
        run: |
          set -euo pipefail
          if [ -n "${PIPELINE_RUN:-}" ]; then
            echo "📊 Monitoring pipeline execution: ${PIPELINE_RUN}"
            tkn pipelinerun logs ${PIPELINE_RUN} --follow || {
              echo "⚠️  Log following failed, showing status instead"
              tkn pipelinerun describe ${PIPELINE_RUN}
            }
          else
            echo "❌ No pipeline run to monitor"
          fi

      - name: Show Pipeline Results
        if: always()
        run: |
          set -euo pipefail
          echo "📊 Pipeline Execution Results"
          echo "Pipeline run: ${PIPELINE_RUN:-}"
          if [ -n "${PIPELINE_RUN:-}" ]; then
            tkn pipelinerun describe ${PIPELINE_RUN} || true
            tkn pipelinerun logs ${PIPELINE_RUN} --follow=false || true
            if [[ "${{ github.repository }}" != "tektoncd/pipeline" ]]; then
              echo ""
              echo "🧪 FORK TESTING RESULTS:"
              echo "   ✅ Pipeline structure validated"
              echo "   ✅ Real secrets used for testing"
              echo "   📦 Artifacts published to test bucket: gs://anitha-tekton-nightly-test/pipeline"
              echo "   🐳 Container images published to: ghcr.io/${{ github.repository_owner }}/pipeline-test"
              echo "   🔍 Check logs above for complete pipeline validation"
            fi
          else
            echo "❌ Pipeline run name not captured - check pipeline start step"
          fi